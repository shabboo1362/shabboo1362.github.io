{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Runahi\\\\e-commerce1\\\\src\\\\pages\\\\products.tsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// This example show how you could create a custom\n// <Link> that renders something special when the URL\n// is the same as the one the <Link> points to.\nconst Products = _ref => {\n  let {\n    par\n  } = _ref;\n  // function CustomLinkExample() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: par\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n  // }\n\n  // function OldSchoolMenuLink({ label, to, activeOnlyWhenExact }:{label:any; to:any; activeOnlyWhenExact:any}) {\n  //   let match = useRouteMatch({\n  //     path: to,\n  //     exact: activeOnlyWhenExact\n  //   });\n\n  //   return (\n  //     <div className={match ? \"active\" : \"\"}>\n  //       {match && \"> \"}\n  //       <Link to={to}>{label}</Link>\n  //     </div>\n  //   );\n  // }\n\n  function Product(_ref2) {\n    let {\n      par\n    } = _ref2;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: par\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }, this);\n  }\n  function Product1() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"You are inside the first level with identity 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this);\n  }\n};\n_c = Products;\nexport default Products;\nvar _c;\n$RefreshReg$(_c, \"Products\");","map":{"version":3,"names":["React","Products","par","Product","Product1"],"sources":["C:/Users/Runahi/e-commerce1/src/pages/products.tsx"],"sourcesContent":["import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useRouteMatch\r\n} from \"react-router-dom\";\r\n\r\n// This example show how you could create a custom\r\n// <Link> that renders something special when the URL\r\n// is the same as the one the <Link> points to.\r\nconst Products = ({par}:{par:any}) => {\r\n// function CustomLinkExample() {\r\n  return (\r\n    <div>\r\n      <h2>{par}</h2>\r\n    </div>\r\n  );\r\n// }\r\n\r\n// function OldSchoolMenuLink({ label, to, activeOnlyWhenExact }:{label:any; to:any; activeOnlyWhenExact:any}) {\r\n//   let match = useRouteMatch({\r\n//     path: to,\r\n//     exact: activeOnlyWhenExact\r\n//   });\r\n\r\n//   return (\r\n//     <div className={match ? \"active\" : \"\"}>\r\n//       {match && \"> \"}\r\n//       <Link to={to}>{label}</Link>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\nfunction Product({par}:{par:any}) {\r\n  return (\r\n    <div>\r\n      <h2>{par}</h2>\r\n    </div>\r\n  );\r\n}\r\nfunction Product1() {\r\n  return (\r\n    <div>\r\n      <h2>You are inside the first level with identity 1</h2>\r\n    </div>\r\n  );\r\n}\r\n}\r\nexport default Products;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC;AAS1B;AACA;AACA;AACA,MAAMC,QAAQ,GAAG,QAAqB;EAAA,IAApB;IAACC;EAAa,CAAC;EACjC;EACE,oBACE;IAAA,uBACE;MAAA,UAAKA;IAAG;MAAA;MAAA;MAAA;IAAA;EAAM;IAAA;IAAA;IAAA;EAAA,QACV;EAEV;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA,SAASC,OAAO,QAAkB;IAAA,IAAjB;MAACD;IAAa,CAAC;IAC9B,oBACE;MAAA,uBACE;QAAA,UAAKA;MAAG;QAAA;QAAA;QAAA;MAAA;IAAM;MAAA;MAAA;MAAA;IAAA,QACV;EAEV;EACA,SAASE,QAAQ,GAAG;IAClB,oBACE;MAAA,uBACE;QAAA,UAAI;MAA8C;QAAA;QAAA;QAAA;MAAA;IAAK;MAAA;MAAA;MAAA;IAAA,QACnD;EAEV;AACA,CAAC;AAAA,KAtCKH,QAAQ;AAuCd,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}