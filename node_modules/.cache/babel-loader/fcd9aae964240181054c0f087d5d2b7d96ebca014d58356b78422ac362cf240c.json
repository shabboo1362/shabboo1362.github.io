{"ast":null,"code":"import { __rest } from 'tslib';\nimport { createBrowserHistory, createHashHistory } from 'history';\nimport React from 'react';\nimport { matchPath as matchPath$1, withRouter, Router } from 'react-router-dom';\nimport { ViewStacks, generateId, IonRoute, ViewLifeCycleManager, StackContext, RouteManagerContext, getConfig, LocationHistory, NavManager } from '@ionic/react';\nimport { Route, matchPath, Router as Router$1 } from 'react-router';\nclass IonRouteInner extends React.PureComponent {\n  render() {\n    return React.createElement(Route, {\n      path: this.props.path,\n      exact: this.props.exact,\n      render: this.props.render,\n      /**\n       * `computedMatch` is a private API in react-router v5 that\n       * has been removed in v6.\n       *\n       * This needs to be removed when we support v6.\n       *\n       * TODO: FW-647\n       */\n      computedMatch: this.props.computedMatch\n    });\n  }\n}\nclass ReactRouterViewStack extends ViewStacks {\n  constructor() {\n    super();\n    this.createViewItem = this.createViewItem.bind(this);\n    this.findViewItemByRouteInfo = this.findViewItemByRouteInfo.bind(this);\n    this.findLeavingViewItemByRouteInfo = this.findLeavingViewItemByRouteInfo.bind(this);\n    this.getChildrenToRender = this.getChildrenToRender.bind(this);\n    this.findViewItemByPathname = this.findViewItemByPathname.bind(this);\n  }\n  createViewItem(outletId, reactElement, routeInfo, page) {\n    const viewItem = {\n      id: generateId('viewItem'),\n      outletId,\n      ionPageElement: page,\n      reactElement,\n      mount: true,\n      ionRoute: false\n    };\n    const matchProps = {\n      exact: reactElement.props.exact,\n      path: reactElement.props.path || reactElement.props.from,\n      component: reactElement.props.component\n    };\n    const match = matchPath(routeInfo.pathname, matchProps);\n    if (reactElement.type === IonRoute) {\n      viewItem.ionRoute = true;\n      viewItem.disableIonPageManagement = reactElement.props.disableIonPageManagement;\n    }\n    viewItem.routeData = {\n      match,\n      childProps: reactElement.props\n    };\n    return viewItem;\n  }\n  getChildrenToRender(outletId, ionRouterOutlet, routeInfo) {\n    const viewItems = this.getViewItemsForOutlet(outletId);\n    // Sync latest routes with viewItems\n    React.Children.forEach(ionRouterOutlet.props.children, child => {\n      const viewItem = viewItems.find(v => {\n        return matchComponent$1(child, v.routeData.childProps.path || v.routeData.childProps.from);\n      });\n      if (viewItem) {\n        viewItem.reactElement = child;\n      }\n    });\n    const children = viewItems.map(viewItem => {\n      let clonedChild;\n      if (viewItem.ionRoute && !viewItem.disableIonPageManagement) {\n        clonedChild = React.createElement(ViewLifeCycleManager, {\n          key: `view-${viewItem.id}`,\n          mount: viewItem.mount,\n          removeView: () => this.remove(viewItem)\n        }, React.cloneElement(viewItem.reactElement, {\n          computedMatch: viewItem.routeData.match\n        }));\n      } else {\n        const match = matchComponent$1(viewItem.reactElement, routeInfo.pathname);\n        clonedChild = React.createElement(ViewLifeCycleManager, {\n          key: `view-${viewItem.id}`,\n          mount: viewItem.mount,\n          removeView: () => this.remove(viewItem)\n        }, React.cloneElement(viewItem.reactElement, {\n          computedMatch: viewItem.routeData.match\n        }));\n        if (!match && viewItem.routeData.match) {\n          viewItem.routeData.match = undefined;\n          viewItem.mount = false;\n        }\n      }\n      return clonedChild;\n    });\n    return children;\n  }\n  findViewItemByRouteInfo(routeInfo, outletId, updateMatch) {\n    const {\n      viewItem,\n      match\n    } = this.findViewItemByPath(routeInfo.pathname, outletId);\n    const shouldUpdateMatch = updateMatch === undefined || updateMatch === true;\n    if (shouldUpdateMatch && viewItem && match) {\n      viewItem.routeData.match = match;\n    }\n    return viewItem;\n  }\n  findLeavingViewItemByRouteInfo(routeInfo, outletId) {\n    let mustBeIonRoute = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const {\n      viewItem\n    } = this.findViewItemByPath(routeInfo.lastPathname, outletId, false, mustBeIonRoute);\n    return viewItem;\n  }\n  findViewItemByPathname(pathname, outletId) {\n    const {\n      viewItem\n    } = this.findViewItemByPath(pathname, outletId);\n    return viewItem;\n  }\n  findViewItemByPath(pathname, outletId, forceExact, mustBeIonRoute) {\n    let viewItem;\n    let match;\n    let viewStack;\n    if (outletId) {\n      viewStack = this.getViewItemsForOutlet(outletId);\n      viewStack.some(matchView);\n      if (!viewItem) {\n        viewStack.some(matchDefaultRoute);\n      }\n    } else {\n      const viewItems = this.getAllViewItems();\n      viewItems.some(matchView);\n      if (!viewItem) {\n        viewItems.some(matchDefaultRoute);\n      }\n    }\n    return {\n      viewItem,\n      match\n    };\n    function matchView(v) {\n      if (mustBeIonRoute && !v.ionRoute) {\n        return false;\n      }\n      const matchProps = {\n        exact: forceExact ? true : v.routeData.childProps.exact,\n        path: v.routeData.childProps.path || v.routeData.childProps.from,\n        component: v.routeData.childProps.component\n      };\n      const myMatch = matchPath(pathname, matchProps);\n      if (myMatch) {\n        viewItem = v;\n        match = myMatch;\n        return true;\n      }\n      return false;\n    }\n    function matchDefaultRoute(v) {\n      // try to find a route that doesn't have a path or from prop, that will be our default route\n      if (!v.routeData.childProps.path && !v.routeData.childProps.from) {\n        match = {\n          path: pathname,\n          url: pathname,\n          isExact: true,\n          params: {}\n        };\n        viewItem = v;\n        return true;\n      }\n      return false;\n    }\n  }\n}\nfunction matchComponent$1(node, pathname, forceExact) {\n  const matchProps = {\n    exact: forceExact ? true : node.props.exact,\n    path: node.props.path || node.props.from,\n    component: node.props.component\n  };\n  const match = matchPath(pathname, matchProps);\n  return match;\n}\nfunction clonePageElement(leavingViewHtml) {\n  let html;\n  if (typeof leavingViewHtml === 'string') {\n    html = leavingViewHtml;\n  } else {\n    html = leavingViewHtml.outerHTML;\n  }\n  if (document) {\n    const newEl = document.createElement('div');\n    newEl.innerHTML = html;\n    newEl.style.zIndex = '';\n    // Remove an existing back button so the new element doesn't get two of them\n    const ionBackButton = newEl.getElementsByTagName('ion-back-button');\n    if (ionBackButton[0]) {\n      ionBackButton[0].remove();\n    }\n    return newEl.firstChild;\n  }\n  return undefined;\n}\nconst isViewVisible = el => !el.classList.contains('ion-page-invisible') && !el.classList.contains('ion-page-hidden');\nclass StackManager extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.stackContextValue = {\n      registerIonPage: this.registerIonPage.bind(this),\n      isInOutlet: () => true\n    };\n    this.pendingPageTransition = false;\n    this.registerIonPage = this.registerIonPage.bind(this);\n    this.transitionPage = this.transitionPage.bind(this);\n    this.handlePageTransition = this.handlePageTransition.bind(this);\n    this.id = generateId('routerOutlet');\n    this.prevProps = undefined;\n    this.skipTransition = false;\n  }\n  componentDidMount() {\n    if (this.clearOutletTimeout) {\n      /**\n       * The clearOutlet integration with React Router is a bit hacky.\n       * It uses a timeout to clear the outlet after a transition.\n       * In React v18, components are mounted and unmounted in development mode\n       * to check for side effects.\n       *\n       * This clearTimeout prevents the outlet from being cleared when the component is re-mounted,\n       * which should only happen in development mode and as a result of a hot reload.\n       */\n      clearTimeout(this.clearOutletTimeout);\n    }\n    if (this.routerOutletElement) {\n      this.setupRouterOutlet(this.routerOutletElement);\n      this.handlePageTransition(this.props.routeInfo);\n    }\n  }\n  componentDidUpdate(prevProps) {\n    const {\n      pathname\n    } = this.props.routeInfo;\n    const {\n      pathname: prevPathname\n    } = prevProps.routeInfo;\n    if (pathname !== prevPathname) {\n      this.prevProps = prevProps;\n      this.handlePageTransition(this.props.routeInfo);\n    } else if (this.pendingPageTransition) {\n      this.handlePageTransition(this.props.routeInfo);\n      this.pendingPageTransition = false;\n    }\n  }\n  componentWillUnmount() {\n    this.clearOutletTimeout = this.context.clearOutlet(this.id);\n  }\n  async handlePageTransition(routeInfo) {\n    var _a, _b;\n    if (!this.routerOutletElement || !this.routerOutletElement.commit) {\n      /**\n       * The route outlet has not mounted yet. We need to wait for it to render\n       * before we can transition the page.\n       *\n       * Set a flag to indicate that we should transition the page after\n       * the component has updated.\n       */\n      this.pendingPageTransition = true;\n    } else {\n      let enteringViewItem = this.context.findViewItemByRouteInfo(routeInfo, this.id);\n      let leavingViewItem = this.context.findLeavingViewItemByRouteInfo(routeInfo, this.id);\n      if (!leavingViewItem && routeInfo.prevRouteLastPathname) {\n        leavingViewItem = this.context.findViewItemByPathname(routeInfo.prevRouteLastPathname, this.id);\n      }\n      // Check if leavingViewItem should be unmounted\n      if (leavingViewItem) {\n        if (routeInfo.routeAction === 'replace') {\n          leavingViewItem.mount = false;\n        } else if (!(routeInfo.routeAction === 'push' && routeInfo.routeDirection === 'forward')) {\n          if (routeInfo.routeDirection !== 'none' && enteringViewItem !== leavingViewItem) {\n            leavingViewItem.mount = false;\n          }\n        } else if ((_a = routeInfo.routeOptions) === null || _a === void 0 ? void 0 : _a.unmount) {\n          leavingViewItem.mount = false;\n        }\n      }\n      const enteringRoute = matchRoute((_b = this.ionRouterOutlet) === null || _b === void 0 ? void 0 : _b.props.children, routeInfo);\n      if (enteringViewItem) {\n        enteringViewItem.reactElement = enteringRoute;\n      } else if (enteringRoute) {\n        enteringViewItem = this.context.createViewItem(this.id, enteringRoute, routeInfo);\n        this.context.addViewItem(enteringViewItem);\n      }\n      if (enteringViewItem && enteringViewItem.ionPageElement) {\n        /**\n         * If the entering view item is the same as the leaving view item,\n         * then we don't need to transition.\n         */\n        if (enteringViewItem === leavingViewItem) {\n          /**\n           * If the entering view item is the same as the leaving view item,\n           * we are either transitioning using parameterized routes to the same view\n           * or a parent router outlet is re-rendering as a result of React props changing.\n           *\n           * If the route data does not match the current path, the parent router outlet\n           * is attempting to transition and we cancel the operation.\n           */\n          if (enteringViewItem.routeData.match.url !== routeInfo.pathname) {\n            return;\n          }\n        }\n        /**\n         * If there isn't a leaving view item, but the route info indicates\n         * that the user has routed from a previous path, then we need\n         * to find the leaving view item to transition between.\n         */\n        if (!leavingViewItem && this.props.routeInfo.prevRouteLastPathname) {\n          leavingViewItem = this.context.findViewItemByPathname(this.props.routeInfo.prevRouteLastPathname, this.id);\n        }\n        /**\n         * If the entering view is already visible and the leaving view is not, the transition does not need to occur.\n         */\n        if (isViewVisible(enteringViewItem.ionPageElement) && leavingViewItem !== undefined && !isViewVisible(leavingViewItem.ionPageElement)) {\n          return;\n        }\n        /**\n         * The view should only be transitioned in the following cases:\n         * 1. Performing a replace or pop action, such as a swipe to go back gesture\n         * to animation the leaving view off the screen.\n         *\n         * 2. Navigating between top-level router outlets, such as /page-1 to /page-2;\n         * or navigating within a nested outlet, such as /tabs/tab-1 to /tabs/tab-2.\n         *\n         * 3. The entering view is an ion-router-outlet containing a page\n         * matching the current route and that hasn't already transitioned in.\n         *\n         * This should only happen when navigating directly to a nested router outlet\n         * route or on an initial page load (i.e. refreshing). In cases when loading\n         * /tabs/tab-1, we need to transition the /tabs page element into the view.\n         */\n        this.transitionPage(routeInfo, enteringViewItem, leavingViewItem);\n      } else if (leavingViewItem && !enteringRoute && !enteringViewItem) {\n        // If we have a leavingView but no entering view/route, we are probably leaving to\n        // another outlet, so hide this leavingView. We do it in a timeout to give time for a\n        // transition to finish.\n        // setTimeout(() => {\n        if (leavingViewItem.ionPageElement) {\n          leavingViewItem.ionPageElement.classList.add('ion-page-hidden');\n          leavingViewItem.ionPageElement.setAttribute('aria-hidden', 'true');\n        }\n        // }, 250);\n      }\n\n      this.forceUpdate();\n    }\n  }\n  registerIonPage(page, routeInfo) {\n    const foundView = this.context.findViewItemByRouteInfo(routeInfo, this.id);\n    if (foundView) {\n      const oldPageElement = foundView.ionPageElement;\n      foundView.ionPageElement = page;\n      foundView.ionRoute = true;\n      /**\n       * React 18 will unmount and remount IonPage\n       * elements in development mode when using createRoot.\n       * This can cause duplicate page transitions to occur.\n       */\n      if (oldPageElement === page) {\n        return;\n      }\n    }\n    this.handlePageTransition(routeInfo);\n  }\n  async setupRouterOutlet(routerOutlet) {\n    const canStart = () => {\n      const config = getConfig();\n      const swipeEnabled = config && config.get('swipeBackEnabled', routerOutlet.mode === 'ios');\n      if (!swipeEnabled) {\n        return false;\n      }\n      const {\n        routeInfo\n      } = this.props;\n      const propsToUse = this.prevProps && this.prevProps.routeInfo.pathname === routeInfo.pushedByRoute ? this.prevProps.routeInfo : {\n        pathname: routeInfo.pushedByRoute || ''\n      };\n      const enteringViewItem = this.context.findViewItemByRouteInfo(propsToUse, this.id, false);\n      return !!enteringViewItem &&\n      /**\n       * The root url '/' is treated as\n       * the first view item (but is never mounted),\n       * so we do not want to swipe back to the\n       * root url.\n       */\n      enteringViewItem.mount &&\n      /**\n       * When on the first page (whatever view\n       * you land on after the root url) it\n       * is possible for findViewItemByRouteInfo to\n       * return the exact same view you are currently on.\n       * Make sure that we are not swiping back to the same\n       * instances of a view.\n       */\n      enteringViewItem.routeData.match.path !== routeInfo.pathname;\n    };\n    const onStart = async () => {\n      const {\n        routeInfo\n      } = this.props;\n      const propsToUse = this.prevProps && this.prevProps.routeInfo.pathname === routeInfo.pushedByRoute ? this.prevProps.routeInfo : {\n        pathname: routeInfo.pushedByRoute || ''\n      };\n      const enteringViewItem = this.context.findViewItemByRouteInfo(propsToUse, this.id, false);\n      const leavingViewItem = this.context.findViewItemByRouteInfo(routeInfo, this.id, false);\n      /**\n       * When the gesture starts, kick off\n       * a transition that is controlled\n       * via a swipe gesture.\n       */\n      if (enteringViewItem && leavingViewItem) {\n        await this.transitionPage(routeInfo, enteringViewItem, leavingViewItem, 'back', true);\n      }\n      return Promise.resolve();\n    };\n    const onEnd = shouldContinue => {\n      if (shouldContinue) {\n        this.skipTransition = true;\n        this.context.goBack();\n      } else {\n        /**\n         * In the event that the swipe\n         * gesture was aborted, we should\n         * re-hide the page that was going to enter.\n         */\n        const {\n          routeInfo\n        } = this.props;\n        const propsToUse = this.prevProps && this.prevProps.routeInfo.pathname === routeInfo.pushedByRoute ? this.prevProps.routeInfo : {\n          pathname: routeInfo.pushedByRoute || ''\n        };\n        const enteringViewItem = this.context.findViewItemByRouteInfo(propsToUse, this.id, false);\n        const leavingViewItem = this.context.findViewItemByRouteInfo(routeInfo, this.id, false);\n        /**\n         * Ionic React has a design defect where it\n         * a) Unmounts the leaving view item when using parameterized routes\n         * b) Considers the current view to be the entering view when using\n         * parameterized routes\n         *\n         * As a result, we should not hide the view item here\n         * as it will cause the current view to be hidden.\n         */\n        if (enteringViewItem !== leavingViewItem && (enteringViewItem === null || enteringViewItem === void 0 ? void 0 : enteringViewItem.ionPageElement) !== undefined) {\n          const {\n            ionPageElement\n          } = enteringViewItem;\n          ionPageElement.setAttribute('aria-hidden', 'true');\n          ionPageElement.classList.add('ion-page-hidden');\n        }\n      }\n    };\n    routerOutlet.swipeHandler = {\n      canStart,\n      onStart,\n      onEnd\n    };\n  }\n  async transitionPage(routeInfo, enteringViewItem, leavingViewItem, direction) {\n    let progressAnimation = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    const runCommit = async (enteringEl, leavingEl) => {\n      const skipTransition = this.skipTransition;\n      /**\n       * If the transition was handled\n       * via the swipe to go back gesture,\n       * then we do not want to perform\n       * another transition.\n       *\n       * We skip adding ion-page or ion-page-invisible\n       * because the entering view already exists in the DOM.\n       * If we added the classes, there would be a flicker where\n       * the view would be briefly hidden.\n       */\n      if (skipTransition) {\n        /**\n         * We need to reset skipTransition before\n         * we call routerOutlet.commit otherwise\n         * the transition triggered by the swipe\n         * to go back gesture would reset it. In\n         * that case you would see a duplicate\n         * transition triggered by handlePageTransition\n         * in componentDidUpdate.\n         */\n        this.skipTransition = false;\n      } else {\n        enteringEl.classList.add('ion-page');\n        enteringEl.classList.add('ion-page-invisible');\n      }\n      await routerOutlet.commit(enteringEl, leavingEl, {\n        deepWait: true,\n        duration: skipTransition || directionToUse === undefined ? 0 : undefined,\n        direction: directionToUse,\n        showGoBack: !!routeInfo.pushedByRoute,\n        progressAnimation,\n        animationBuilder: routeInfo.routeAnimation\n      });\n    };\n    const routerOutlet = this.routerOutletElement;\n    const routeInfoFallbackDirection = routeInfo.routeDirection === 'none' || routeInfo.routeDirection === 'root' ? undefined : routeInfo.routeDirection;\n    const directionToUse = direction !== null && direction !== void 0 ? direction : routeInfoFallbackDirection;\n    if (enteringViewItem && enteringViewItem.ionPageElement && this.routerOutletElement) {\n      if (leavingViewItem && leavingViewItem.ionPageElement && enteringViewItem === leavingViewItem) {\n        // If a page is transitioning to another version of itself\n        // we clone it so we can have an animation to show\n        const match = matchComponent(leavingViewItem.reactElement, routeInfo.pathname, true);\n        if (match) {\n          const newLeavingElement = clonePageElement(leavingViewItem.ionPageElement.outerHTML);\n          if (newLeavingElement) {\n            this.routerOutletElement.appendChild(newLeavingElement);\n            await runCommit(enteringViewItem.ionPageElement, newLeavingElement);\n            this.routerOutletElement.removeChild(newLeavingElement);\n          }\n        } else {\n          await runCommit(enteringViewItem.ionPageElement, undefined);\n        }\n      } else {\n        await runCommit(enteringViewItem.ionPageElement, leavingViewItem === null || leavingViewItem === void 0 ? void 0 : leavingViewItem.ionPageElement);\n        if (leavingViewItem && leavingViewItem.ionPageElement && !progressAnimation) {\n          leavingViewItem.ionPageElement.classList.add('ion-page-hidden');\n          leavingViewItem.ionPageElement.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n  render() {\n    const {\n      children\n    } = this.props;\n    const ionRouterOutlet = React.Children.only(children);\n    this.ionRouterOutlet = ionRouterOutlet;\n    const components = this.context.getChildrenToRender(this.id, this.ionRouterOutlet, this.props.routeInfo, () => {\n      this.forceUpdate();\n    });\n    return React.createElement(StackContext.Provider, {\n      value: this.stackContextValue\n    }, React.cloneElement(ionRouterOutlet, {\n      ref: node => {\n        if (ionRouterOutlet.props.setRef) {\n          ionRouterOutlet.props.setRef(node);\n        }\n        if (ionRouterOutlet.props.forwardedRef) {\n          ionRouterOutlet.props.forwardedRef.current = node;\n        }\n        this.routerOutletElement = node;\n        const {\n          ref\n        } = ionRouterOutlet;\n        if (typeof ref === 'function') {\n          ref(node);\n        }\n      }\n    }, components));\n  }\n  static get contextType() {\n    return RouteManagerContext;\n  }\n}\nfunction matchRoute(node, routeInfo) {\n  let matchedNode;\n  React.Children.forEach(node, child => {\n    const matchProps = {\n      exact: child.props.exact,\n      path: child.props.path || child.props.from,\n      component: child.props.component\n    };\n    const match = matchPath$1(routeInfo.pathname, matchProps);\n    if (match) {\n      matchedNode = child;\n    }\n  });\n  if (matchedNode) {\n    return matchedNode;\n  }\n  // If we haven't found a node\n  // try to find one that doesn't have a path or from prop, that will be our not found route\n  React.Children.forEach(node, child => {\n    if (!(child.props.path || child.props.from)) {\n      matchedNode = child;\n    }\n  });\n  return matchedNode;\n}\nfunction matchComponent(node, pathname, forceExact) {\n  const matchProps = {\n    exact: forceExact ? true : node.props.exact,\n    path: node.props.path || node.props.from,\n    component: node.props.component\n  };\n  const match = matchPath$1(pathname, matchProps);\n  return match;\n}\nclass IonRouterInner extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.exitViewFromOtherOutletHandlers = [];\n    this.locationHistory = new LocationHistory();\n    this.viewStack = new ReactRouterViewStack();\n    this.routeMangerContextState = {\n      canGoBack: () => this.locationHistory.canGoBack(),\n      clearOutlet: this.viewStack.clear,\n      findViewItemByPathname: this.viewStack.findViewItemByPathname,\n      getChildrenToRender: this.viewStack.getChildrenToRender,\n      goBack: () => this.handleNavigateBack(),\n      createViewItem: this.viewStack.createViewItem,\n      findViewItemByRouteInfo: this.viewStack.findViewItemByRouteInfo,\n      findLeavingViewItemByRouteInfo: this.viewStack.findLeavingViewItemByRouteInfo,\n      addViewItem: this.viewStack.add,\n      unMountViewItem: this.viewStack.remove\n    };\n    const routeInfo = {\n      id: generateId('routeInfo'),\n      pathname: this.props.location.pathname,\n      search: this.props.location.search\n    };\n    this.locationHistory.add(routeInfo);\n    this.handleChangeTab = this.handleChangeTab.bind(this);\n    this.handleResetTab = this.handleResetTab.bind(this);\n    this.handleNativeBack = this.handleNativeBack.bind(this);\n    this.handleNavigate = this.handleNavigate.bind(this);\n    this.handleNavigateBack = this.handleNavigateBack.bind(this);\n    this.props.registerHistoryListener(this.handleHistoryChange.bind(this));\n    this.handleSetCurrentTab = this.handleSetCurrentTab.bind(this);\n    this.state = {\n      routeInfo\n    };\n  }\n  handleChangeTab(tab, path, routeOptions) {\n    if (!path) {\n      return;\n    }\n    const routeInfo = this.locationHistory.getCurrentRouteInfoForTab(tab);\n    const [pathname, search] = path.split('?');\n    if (routeInfo) {\n      this.incomingRouteParams = Object.assign(Object.assign({}, routeInfo), {\n        routeAction: 'push',\n        routeDirection: 'none'\n      });\n      if (routeInfo.pathname === pathname) {\n        this.incomingRouteParams.routeOptions = routeOptions;\n        this.props.history.push(routeInfo.pathname + (routeInfo.search || ''));\n      } else {\n        this.incomingRouteParams.pathname = pathname;\n        this.incomingRouteParams.search = search ? '?' + search : undefined;\n        this.incomingRouteParams.routeOptions = routeOptions;\n        this.props.history.push(pathname + (search ? '?' + search : ''));\n      }\n    } else {\n      this.handleNavigate(pathname, 'push', 'none', undefined, routeOptions, tab);\n    }\n  }\n  handleHistoryChange(location, action) {\n    var _a, _b, _c;\n    let leavingLocationInfo;\n    if (this.incomingRouteParams) {\n      if (this.incomingRouteParams.routeAction === 'replace') {\n        leavingLocationInfo = this.locationHistory.previous();\n      } else {\n        leavingLocationInfo = this.locationHistory.current();\n      }\n    } else {\n      leavingLocationInfo = this.locationHistory.current();\n    }\n    const leavingUrl = leavingLocationInfo.pathname + leavingLocationInfo.search;\n    if (leavingUrl !== location.pathname) {\n      if (!this.incomingRouteParams) {\n        if (action === 'REPLACE') {\n          this.incomingRouteParams = {\n            routeAction: 'replace',\n            routeDirection: 'none',\n            tab: this.currentTab\n          };\n        }\n        if (action === 'POP') {\n          const currentRoute = this.locationHistory.current();\n          if (currentRoute && currentRoute.pushedByRoute) {\n            const prevInfo = this.locationHistory.findLastLocation(currentRoute);\n            this.incomingRouteParams = Object.assign(Object.assign({}, prevInfo), {\n              routeAction: 'pop',\n              routeDirection: 'back'\n            });\n          } else {\n            this.incomingRouteParams = {\n              routeAction: 'pop',\n              routeDirection: 'none',\n              tab: this.currentTab\n            };\n          }\n        }\n        if (!this.incomingRouteParams) {\n          this.incomingRouteParams = {\n            routeAction: 'push',\n            routeDirection: ((_a = location.state) === null || _a === void 0 ? void 0 : _a.direction) || 'forward',\n            routeOptions: (_b = location.state) === null || _b === void 0 ? void 0 : _b.routerOptions,\n            tab: this.currentTab\n          };\n        }\n      }\n      let routeInfo;\n      if ((_c = this.incomingRouteParams) === null || _c === void 0 ? void 0 : _c.id) {\n        routeInfo = Object.assign(Object.assign({}, this.incomingRouteParams), {\n          lastPathname: leavingLocationInfo.pathname\n        });\n        this.locationHistory.add(routeInfo);\n      } else {\n        const isPushed = this.incomingRouteParams.routeAction === 'push' && this.incomingRouteParams.routeDirection === 'forward';\n        routeInfo = Object.assign(Object.assign({\n          id: generateId('routeInfo')\n        }, this.incomingRouteParams), {\n          lastPathname: leavingLocationInfo.pathname,\n          pathname: location.pathname,\n          search: location.search,\n          params: this.props.match.params,\n          prevRouteLastPathname: leavingLocationInfo.lastPathname\n        });\n        if (isPushed) {\n          routeInfo.tab = leavingLocationInfo.tab;\n          routeInfo.pushedByRoute = leavingLocationInfo.pathname;\n        } else if (routeInfo.routeAction === 'pop') {\n          const r = this.locationHistory.findLastLocation(routeInfo);\n          routeInfo.pushedByRoute = r === null || r === void 0 ? void 0 : r.pushedByRoute;\n        } else if (routeInfo.routeAction === 'push' && routeInfo.tab !== leavingLocationInfo.tab) {\n          // If we are switching tabs grab the last route info for the tab and use its pushedByRoute\n          const lastRoute = this.locationHistory.getCurrentRouteInfoForTab(routeInfo.tab);\n          routeInfo.pushedByRoute = lastRoute === null || lastRoute === void 0 ? void 0 : lastRoute.pushedByRoute;\n        } else if (routeInfo.routeAction === 'replace') {\n          // Make sure to set the lastPathname, etc.. to the current route so the page transitions out\n          const currentRouteInfo = this.locationHistory.current();\n          /**\n           * If going from /home to /child, then replacing from\n           * /child to /home, we don't want the route info to\n           * say that /home was pushed by /home which is not correct.\n           */\n          const currentPushedBy = currentRouteInfo === null || currentRouteInfo === void 0 ? void 0 : currentRouteInfo.pushedByRoute;\n          const pushedByRoute = currentPushedBy !== undefined && currentPushedBy !== routeInfo.pathname ? currentPushedBy : routeInfo.pushedByRoute;\n          routeInfo.lastPathname = (currentRouteInfo === null || currentRouteInfo === void 0 ? void 0 : currentRouteInfo.pathname) || routeInfo.lastPathname;\n          routeInfo.prevRouteLastPathname = currentRouteInfo === null || currentRouteInfo === void 0 ? void 0 : currentRouteInfo.lastPathname;\n          routeInfo.pushedByRoute = pushedByRoute;\n          routeInfo.routeDirection = (currentRouteInfo === null || currentRouteInfo === void 0 ? void 0 : currentRouteInfo.routeDirection) || routeInfo.routeDirection;\n          routeInfo.routeAnimation = (currentRouteInfo === null || currentRouteInfo === void 0 ? void 0 : currentRouteInfo.routeAnimation) || routeInfo.routeAnimation;\n        }\n        this.locationHistory.add(routeInfo);\n      }\n      this.setState({\n        routeInfo\n      });\n    }\n    this.incomingRouteParams = undefined;\n  }\n  /**\n   * history@4.x uses goBack(), history@5.x uses back()\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just\n   * assume back() is available.\n   */\n  handleNativeBack() {\n    const history = this.props.history;\n    const goBack = history.goBack || history.back;\n    goBack();\n  }\n  handleNavigate(path, routeAction, routeDirection, routeAnimation, routeOptions, tab) {\n    this.incomingRouteParams = Object.assign(this.incomingRouteParams || {}, {\n      routeAction,\n      routeDirection,\n      routeOptions,\n      routeAnimation,\n      tab\n    });\n    if (routeAction === 'push') {\n      this.props.history.push(path);\n    } else {\n      this.props.history.replace(path);\n    }\n  }\n  handleNavigateBack() {\n    let defaultHref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';\n    let routeAnimation = arguments.length > 1 ? arguments[1] : undefined;\n    const config = getConfig();\n    defaultHref = defaultHref ? defaultHref : config && config.get('backButtonDefaultHref');\n    const routeInfo = this.locationHistory.current();\n    if (routeInfo && routeInfo.pushedByRoute) {\n      const prevInfo = this.locationHistory.findLastLocation(routeInfo);\n      if (prevInfo) {\n        this.incomingRouteParams = Object.assign(Object.assign({}, prevInfo), {\n          routeAction: 'pop',\n          routeDirection: 'back',\n          routeAnimation: routeAnimation || routeInfo.routeAnimation\n        });\n        if (routeInfo.lastPathname === routeInfo.pushedByRoute ||\n        /**\n         * We need to exclude tab switches/tab\n         * context changes here because tabbed\n         * navigation is not linear, but router.back()\n         * will go back in a linear fashion.\n         */\n        prevInfo.pathname === routeInfo.pushedByRoute && routeInfo.tab === '' && prevInfo.tab === '') {\n          /**\n           * history@4.x uses goBack(), history@5.x uses back()\n           * TODO: If support for React Router <=5 is dropped\n           * this logic is no longer needed. We can just\n           * assume back() is available.\n           */\n          const history = this.props.history;\n          const goBack = history.goBack || history.back;\n          goBack();\n        } else {\n          this.handleNavigate(prevInfo.pathname + (prevInfo.search || ''), 'pop', 'back');\n        }\n      } else {\n        this.handleNavigate(defaultHref, 'pop', 'back');\n      }\n    } else {\n      this.handleNavigate(defaultHref, 'pop', 'back');\n    }\n  }\n  handleResetTab(tab, originalHref, originalRouteOptions) {\n    const routeInfo = this.locationHistory.getFirstRouteInfoForTab(tab);\n    if (routeInfo) {\n      const newRouteInfo = Object.assign({}, routeInfo);\n      newRouteInfo.pathname = originalHref;\n      newRouteInfo.routeOptions = originalRouteOptions;\n      this.incomingRouteParams = Object.assign(Object.assign({}, newRouteInfo), {\n        routeAction: 'pop',\n        routeDirection: 'back'\n      });\n      this.props.history.push(newRouteInfo.pathname + (newRouteInfo.search || ''));\n    }\n  }\n  handleSetCurrentTab(tab) {\n    this.currentTab = tab;\n    const ri = Object.assign({}, this.locationHistory.current());\n    if (ri.tab !== tab) {\n      ri.tab = tab;\n      this.locationHistory.update(ri);\n    }\n  }\n  render() {\n    return React.createElement(RouteManagerContext.Provider, {\n      value: this.routeMangerContextState\n    }, React.createElement(NavManager, {\n      ionRoute: IonRouteInner,\n      ionRedirect: {},\n      stackManager: StackManager,\n      routeInfo: this.state.routeInfo,\n      onNativeBack: this.handleNativeBack,\n      onNavigateBack: this.handleNavigateBack,\n      onNavigate: this.handleNavigate,\n      onSetCurrentTab: this.handleSetCurrentTab,\n      onChangeTab: this.handleChangeTab,\n      onResetTab: this.handleResetTab,\n      locationHistory: this.locationHistory\n    }, this.props.children));\n  }\n}\nconst IonRouter = withRouter(IonRouterInner);\nIonRouter.displayName = 'IonRouter';\nclass IonReactRouter extends React.Component {\n  constructor(props) {\n    super(props);\n    const {\n        history\n      } = props,\n      rest = __rest(props, [\"history\"]);\n    this.history = history || createBrowserHistory(rest);\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n  /**\n   * history@4.x passes separate location and action\n   * params. history@5.x passes location and action\n   * together as a single object.\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just assume\n   * a single object with both location and action.\n   */\n  handleHistoryChange(location, action) {\n    const locationValue = location.location || location;\n    const actionValue = location.action || action;\n    if (this.historyListenHandler) {\n      this.historyListenHandler(locationValue, actionValue);\n    }\n  }\n  registerHistoryListener(cb) {\n    this.historyListenHandler = cb;\n  }\n  render() {\n    const _a = this.props,\n      {\n        children\n      } = _a,\n      props = __rest(_a, [\"children\"]);\n    return React.createElement(Router, Object.assign({\n      history: this.history\n    }, props), React.createElement(IonRouter, {\n      registerHistoryListener: this.registerHistoryListener\n    }, children));\n  }\n}\nclass IonReactMemoryRouter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.history = props.history;\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n  /**\n   * history@4.x passes separate location and action\n   * params. history@5.x passes location and action\n   * together as a single object.\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just assume\n   * a single object with both location and action.\n   */\n  handleHistoryChange(location, action) {\n    const locationValue = location.location || location;\n    const actionValue = location.action || action;\n    if (this.historyListenHandler) {\n      this.historyListenHandler(locationValue, actionValue);\n    }\n  }\n  registerHistoryListener(cb) {\n    this.historyListenHandler = cb;\n  }\n  render() {\n    const _a = this.props,\n      {\n        children\n      } = _a,\n      props = __rest(_a, [\"children\"]);\n    return React.createElement(Router$1, Object.assign({}, props), React.createElement(IonRouter, {\n      registerHistoryListener: this.registerHistoryListener\n    }, children));\n  }\n}\nclass IonReactHashRouter extends React.Component {\n  constructor(props) {\n    super(props);\n    const {\n        history\n      } = props,\n      rest = __rest(props, [\"history\"]);\n    this.history = history || createHashHistory(rest);\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n  /**\n   * history@4.x passes separate location and action\n   * params. history@5.x passes location and action\n   * together as a single object.\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just assume\n   * a single object with both location and action.\n   */\n  handleHistoryChange(location, action) {\n    const locationValue = location.location || location;\n    const actionValue = location.action || action;\n    if (this.historyListenHandler) {\n      this.historyListenHandler(locationValue, actionValue);\n    }\n  }\n  registerHistoryListener(cb) {\n    this.historyListenHandler = cb;\n  }\n  render() {\n    const _a = this.props,\n      {\n        children\n      } = _a,\n      props = __rest(_a, [\"children\"]);\n    return React.createElement(Router, Object.assign({\n      history: this.history\n    }, props), React.createElement(IonRouter, {\n      registerHistoryListener: this.registerHistoryListener\n    }, children));\n  }\n}\nexport { IonReactHashRouter, IonReactMemoryRouter, IonReactRouter };","map":{"version":3,"mappings":"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","names":["IonRouteInner","React","PureComponent","render","Route","path","props","exact","computedMatch","ReactRouterViewStack","ViewStacks","constructor","createViewItem","bind","findViewItemByRouteInfo","findLeavingViewItemByRouteInfo","getChildrenToRender","findViewItemByPathname","outletId","reactElement","routeInfo","page","viewItem","id","generateId","ionPageElement","mount","ionRoute","matchProps","from","component","match","matchPath","pathname","type","IonRoute","disableIonPageManagement","routeData","childProps","ionRouterOutlet","viewItems","getViewItemsForOutlet","Children","forEach","children","child","find","v","matchComponent","map","clonedChild","ViewLifeCycleManager","key","removeView","remove","cloneElement","undefined","updateMatch","findViewItemByPath","shouldUpdateMatch","mustBeIonRoute","lastPathname","forceExact","viewStack","some","matchView","matchDefaultRoute","getAllViewItems","myMatch","url","isExact","params","node","clonePageElement","leavingViewHtml","html","outerHTML","document","newEl","createElement","innerHTML","style","zIndex","ionBackButton","getElementsByTagName","firstChild","isViewVisible","el","classList","contains","StackManager","registerIonPage","isInOutlet","transitionPage","handlePageTransition","prevProps","skipTransition","componentDidMount","clearOutletTimeout","clearTimeout","routerOutletElement","setupRouterOutlet","componentDidUpdate","prevPathname","pendingPageTransition","componentWillUnmount","context","clearOutlet","commit","enteringViewItem","leavingViewItem","prevRouteLastPathname","routeAction","routeDirection","routeOptions","unmount","enteringRoute","matchRoute","addViewItem","add","setAttribute","forceUpdate","foundView","oldPageElement","routerOutlet","canStart","config","getConfig","swipeEnabled","get","mode","propsToUse","pushedByRoute","onStart","Promise","resolve","onEnd","shouldContinue","goBack","swipeHandler","direction","progressAnimation","runCommit","enteringEl","leavingEl","deepWait","duration","directionToUse","showGoBack","animationBuilder","routeAnimation","routeInfoFallbackDirection","newLeavingElement","appendChild","removeChild","only","components","StackContext","Provider","value","stackContextValue","ref","setRef","forwardedRef","current","contextType","RouteManagerContext","matchedNode","IonRouterInner","LocationHistory","canGoBack","locationHistory","clear","handleNavigateBack","unMountViewItem","location","search","handleChangeTab","handleResetTab","handleNativeBack","handleNavigate","registerHistoryListener","handleHistoryChange","handleSetCurrentTab","state","tab","getCurrentRouteInfoForTab","split","incomingRouteParams","history","push","action","leavingLocationInfo","previous","leavingUrl","currentTab","currentRoute","prevInfo","findLastLocation","routerOptions","isPushed","r","lastRoute","currentRouteInfo","currentPushedBy","setState","back","Object","assign","replace","defaultHref","originalHref","originalRouteOptions","getFirstRouteInfoForTab","newRouteInfo","ri","update","routeMangerContextState","NavManager","ionRedirect","stackManager","onNativeBack","onNavigateBack","onNavigate","onSetCurrentTab","onChangeTab","onResetTab","IonRouter","withRouter","displayName","IonReactRouter","Component","rest","createHistory","listen","locationValue","actionValue","historyListenHandler","cb","_a","Router","IonReactMemoryRouter","IonReactHashRouter"],"sources":["C:\\Users\\Runahi\\e-commerce1\\node_modules\\@ionic\\react-router\\src\\ReactRouter\\IonRouteInner.tsx","C:\\Users\\Runahi\\e-commerce1\\node_modules\\@ionic\\react-router\\src\\ReactRouter\\ReactRouterViewStack.tsx","C:\\Users\\Runahi\\e-commerce1\\node_modules\\@ionic\\react-router\\src\\ReactRouter\\clonePageElement.ts","C:\\Users\\Runahi\\e-commerce1\\node_modules\\@ionic\\react-router\\src\\ReactRouter\\StackManager.tsx","C:\\Users\\Runahi\\e-commerce1\\node_modules\\@ionic\\react-router\\src\\ReactRouter\\IonRouter.tsx","C:\\Users\\Runahi\\e-commerce1\\node_modules\\@ionic\\react-router\\src\\ReactRouter\\IonReactRouter.tsx","C:\\Users\\Runahi\\e-commerce1\\node_modules\\@ionic\\react-router\\src\\ReactRouter\\IonReactMemoryRouter.tsx","C:\\Users\\Runahi\\e-commerce1\\node_modules\\@ionic\\react-router\\src\\ReactRouter\\IonReactHashRouter.tsx"],"sourcesContent":["import { IonRouteProps } from '@ionic/react';\nimport React from 'react';\nimport { Route } from 'react-router';\n\nexport class IonRouteInner extends React.PureComponent<IonRouteProps> {\n  render() {\n    return (\n      <Route\n        path={this.props.path}\n        exact={this.props.exact}\n        render={this.props.render}\n        /**\n         * `computedMatch` is a private API in react-router v5 that\n         * has been removed in v6.\n         *\n         * This needs to be removed when we support v6.\n         *\n         * TODO: FW-647\n         */\n        computedMatch={(this.props as any).computedMatch}\n      />\n    );\n  }\n}\n","import {\n  IonRoute,\n  RouteInfo,\n  ViewItem,\n  ViewLifeCycleManager,\n  ViewStacks,\n  generateId,\n} from '@ionic/react';\nimport React from 'react';\nimport { matchPath } from 'react-router';\n\nexport class ReactRouterViewStack extends ViewStacks {\n  constructor() {\n    super();\n    this.createViewItem = this.createViewItem.bind(this);\n    this.findViewItemByRouteInfo = this.findViewItemByRouteInfo.bind(this);\n    this.findLeavingViewItemByRouteInfo = this.findLeavingViewItemByRouteInfo.bind(this);\n    this.getChildrenToRender = this.getChildrenToRender.bind(this);\n    this.findViewItemByPathname = this.findViewItemByPathname.bind(this);\n  }\n\n  createViewItem(\n    outletId: string,\n    reactElement: React.ReactElement,\n    routeInfo: RouteInfo,\n    page?: HTMLElement\n  ) {\n    const viewItem: ViewItem = {\n      id: generateId('viewItem'),\n      outletId,\n      ionPageElement: page,\n      reactElement,\n      mount: true,\n      ionRoute: false,\n    };\n\n    const matchProps = {\n      exact: reactElement.props.exact,\n      path: reactElement.props.path || reactElement.props.from,\n      component: reactElement.props.component,\n    };\n\n    const match = matchPath(routeInfo.pathname, matchProps);\n\n    if (reactElement.type === IonRoute) {\n      viewItem.ionRoute = true;\n      viewItem.disableIonPageManagement = reactElement.props.disableIonPageManagement;\n    }\n\n    viewItem.routeData = {\n      match,\n      childProps: reactElement.props,\n    };\n\n    return viewItem;\n  }\n\n  getChildrenToRender(outletId: string, ionRouterOutlet: React.ReactElement, routeInfo: RouteInfo) {\n    const viewItems = this.getViewItemsForOutlet(outletId);\n\n    // Sync latest routes with viewItems\n    React.Children.forEach(ionRouterOutlet.props.children, (child: React.ReactElement) => {\n      const viewItem = viewItems.find((v) => {\n        return matchComponent(child, v.routeData.childProps.path || v.routeData.childProps.from);\n      });\n      if (viewItem) {\n        viewItem.reactElement = child;\n      }\n    });\n\n    const children = viewItems.map((viewItem) => {\n      let clonedChild;\n      if (viewItem.ionRoute && !viewItem.disableIonPageManagement) {\n        clonedChild = (\n          <ViewLifeCycleManager\n            key={`view-${viewItem.id}`}\n            mount={viewItem.mount}\n            removeView={() => this.remove(viewItem)}\n          >\n            {React.cloneElement(viewItem.reactElement, {\n              computedMatch: viewItem.routeData.match,\n            })}\n          </ViewLifeCycleManager>\n        );\n      } else {\n        const match = matchComponent(viewItem.reactElement, routeInfo.pathname);\n        clonedChild = (\n          <ViewLifeCycleManager\n            key={`view-${viewItem.id}`}\n            mount={viewItem.mount}\n            removeView={() => this.remove(viewItem)}\n          >\n            {React.cloneElement(viewItem.reactElement, {\n              computedMatch: viewItem.routeData.match,\n            })}\n          </ViewLifeCycleManager>\n        );\n\n        if (!match && viewItem.routeData.match) {\n          viewItem.routeData.match = undefined;\n          viewItem.mount = false;\n        }\n      }\n\n      return clonedChild;\n    });\n    return children;\n  }\n\n  findViewItemByRouteInfo(routeInfo: RouteInfo, outletId?: string, updateMatch?: boolean) {\n    const { viewItem, match } = this.findViewItemByPath(routeInfo.pathname, outletId);\n    const shouldUpdateMatch = updateMatch === undefined || updateMatch === true;\n    if (shouldUpdateMatch && viewItem && match) {\n      viewItem.routeData.match = match;\n    }\n    return viewItem;\n  }\n\n  findLeavingViewItemByRouteInfo(routeInfo: RouteInfo, outletId?: string, mustBeIonRoute = true) {\n    const { viewItem } = this.findViewItemByPath(\n      routeInfo.lastPathname!,\n      outletId,\n      false,\n      mustBeIonRoute\n    );\n    return viewItem;\n  }\n\n  findViewItemByPathname(pathname: string, outletId?: string) {\n    const { viewItem } = this.findViewItemByPath(pathname, outletId);\n    return viewItem;\n  }\n\n  private findViewItemByPath(\n    pathname: string,\n    outletId?: string,\n    forceExact?: boolean,\n    mustBeIonRoute?: boolean\n  ) {\n    let viewItem: ViewItem | undefined;\n    let match: ReturnType<typeof matchPath> | undefined;\n    let viewStack: ViewItem[];\n\n    if (outletId) {\n      viewStack = this.getViewItemsForOutlet(outletId);\n      viewStack.some(matchView);\n      if (!viewItem) {\n        viewStack.some(matchDefaultRoute);\n      }\n    } else {\n      const viewItems = this.getAllViewItems();\n      viewItems.some(matchView);\n      if (!viewItem) {\n        viewItems.some(matchDefaultRoute);\n      }\n    }\n\n    return { viewItem, match };\n\n    function matchView(v: ViewItem) {\n      if (mustBeIonRoute && !v.ionRoute) {\n        return false;\n      }\n      const matchProps = {\n        exact: forceExact ? true : v.routeData.childProps.exact,\n        path: v.routeData.childProps.path || v.routeData.childProps.from,\n        component: v.routeData.childProps.component,\n      };\n      const myMatch = matchPath(pathname, matchProps);\n      if (myMatch) {\n        viewItem = v;\n        match = myMatch;\n        return true;\n      }\n      return false;\n    }\n\n    function matchDefaultRoute(v: ViewItem) {\n      // try to find a route that doesn't have a path or from prop, that will be our default route\n      if (!v.routeData.childProps.path && !v.routeData.childProps.from) {\n        match = {\n          path: pathname,\n          url: pathname,\n          isExact: true,\n          params: {},\n        };\n        viewItem = v;\n        return true;\n      }\n      return false;\n    }\n  }\n}\n\nfunction matchComponent(node: React.ReactElement, pathname: string, forceExact?: boolean) {\n  const matchProps = {\n    exact: forceExact ? true : node.props.exact,\n    path: node.props.path || node.props.from,\n    component: node.props.component,\n  };\n  const match = matchPath(pathname, matchProps);\n\n  return match;\n}\n","export function clonePageElement(leavingViewHtml: string | HTMLElement) {\n  let html: string;\n  if (typeof leavingViewHtml === 'string') {\n    html = leavingViewHtml;\n  } else {\n    html = leavingViewHtml.outerHTML;\n  }\n  if (document) {\n    const newEl = document.createElement('div');\n    newEl.innerHTML = html;\n    newEl.style.zIndex = '';\n    // Remove an existing back button so the new element doesn't get two of them\n    const ionBackButton = newEl.getElementsByTagName('ion-back-button');\n    if (ionBackButton[0]) {\n      ionBackButton[0].remove();\n    }\n    return newEl.firstChild as HTMLElement;\n  }\n  return undefined;\n}\n","import {\n  RouteInfo,\n  RouteManagerContext,\n  StackContext,\n  StackContextState,\n  ViewItem,\n  generateId,\n  getConfig,\n} from '@ionic/react';\nimport React from 'react';\nimport { matchPath } from 'react-router-dom';\n\nimport { clonePageElement } from './clonePageElement';\n\ninterface StackManagerProps {\n  routeInfo: RouteInfo;\n}\n\ninterface StackManagerState {}\n\nconst isViewVisible = (el: HTMLElement) =>\n  !el.classList.contains('ion-page-invisible') && !el.classList.contains('ion-page-hidden');\n\nexport class StackManager extends React.PureComponent<StackManagerProps, StackManagerState> {\n  id: string;\n  context!: React.ContextType<typeof RouteManagerContext>;\n  ionRouterOutlet?: React.ReactElement;\n  routerOutletElement: HTMLIonRouterOutletElement | undefined;\n  prevProps?: StackManagerProps;\n  skipTransition: boolean;\n\n  stackContextValue: StackContextState = {\n    registerIonPage: this.registerIonPage.bind(this),\n    isInOutlet: () => true,\n  };\n\n  private clearOutletTimeout: any;\n  private pendingPageTransition = false;\n\n  constructor(props: StackManagerProps) {\n    super(props);\n    this.registerIonPage = this.registerIonPage.bind(this);\n    this.transitionPage = this.transitionPage.bind(this);\n    this.handlePageTransition = this.handlePageTransition.bind(this);\n    this.id = generateId('routerOutlet');\n    this.prevProps = undefined;\n    this.skipTransition = false;\n  }\n\n  componentDidMount() {\n    if (this.clearOutletTimeout) {\n      /**\n       * The clearOutlet integration with React Router is a bit hacky.\n       * It uses a timeout to clear the outlet after a transition.\n       * In React v18, components are mounted and unmounted in development mode\n       * to check for side effects.\n       *\n       * This clearTimeout prevents the outlet from being cleared when the component is re-mounted,\n       * which should only happen in development mode and as a result of a hot reload.\n       */\n      clearTimeout(this.clearOutletTimeout);\n    }\n    if (this.routerOutletElement) {\n      this.setupRouterOutlet(this.routerOutletElement);\n      this.handlePageTransition(this.props.routeInfo);\n    }\n  }\n\n  componentDidUpdate(prevProps: StackManagerProps) {\n    const { pathname } = this.props.routeInfo;\n    const { pathname: prevPathname } = prevProps.routeInfo;\n\n    if (pathname !== prevPathname) {\n      this.prevProps = prevProps;\n      this.handlePageTransition(this.props.routeInfo);\n    } else if (this.pendingPageTransition) {\n      this.handlePageTransition(this.props.routeInfo);\n      this.pendingPageTransition = false;\n    }\n  }\n\n  componentWillUnmount() {\n    this.clearOutletTimeout = this.context.clearOutlet(this.id);\n  }\n\n  async handlePageTransition(routeInfo: RouteInfo) {\n    if (!this.routerOutletElement || !this.routerOutletElement.commit) {\n      /**\n       * The route outlet has not mounted yet. We need to wait for it to render\n       * before we can transition the page.\n       *\n       * Set a flag to indicate that we should transition the page after\n       * the component has updated.\n       */\n      this.pendingPageTransition = true;\n    } else {\n      let enteringViewItem = this.context.findViewItemByRouteInfo(routeInfo, this.id);\n      let leavingViewItem = this.context.findLeavingViewItemByRouteInfo(routeInfo, this.id);\n\n      if (!leavingViewItem && routeInfo.prevRouteLastPathname) {\n        leavingViewItem = this.context.findViewItemByPathname(\n          routeInfo.prevRouteLastPathname,\n          this.id\n        );\n      }\n\n      // Check if leavingViewItem should be unmounted\n      if (leavingViewItem) {\n        if (routeInfo.routeAction === 'replace') {\n          leavingViewItem.mount = false;\n        } else if (!(routeInfo.routeAction === 'push' && routeInfo.routeDirection === 'forward')) {\n          if (routeInfo.routeDirection !== 'none' && enteringViewItem !== leavingViewItem) {\n            leavingViewItem.mount = false;\n          }\n        } else if (routeInfo.routeOptions?.unmount) {\n          leavingViewItem.mount = false;\n        }\n      }\n\n      const enteringRoute = matchRoute(\n        this.ionRouterOutlet?.props.children,\n        routeInfo\n      ) as React.ReactElement;\n\n      if (enteringViewItem) {\n        enteringViewItem.reactElement = enteringRoute;\n      } else if (enteringRoute) {\n        enteringViewItem = this.context.createViewItem(this.id, enteringRoute, routeInfo);\n        this.context.addViewItem(enteringViewItem);\n      }\n\n      if (enteringViewItem && enteringViewItem.ionPageElement) {\n        /**\n         * If the entering view item is the same as the leaving view item,\n         * then we don't need to transition.\n         */\n        if (enteringViewItem === leavingViewItem) {\n          /**\n           * If the entering view item is the same as the leaving view item,\n           * we are either transitioning using parameterized routes to the same view\n           * or a parent router outlet is re-rendering as a result of React props changing.\n           *\n           * If the route data does not match the current path, the parent router outlet\n           * is attempting to transition and we cancel the operation.\n           */\n          if (enteringViewItem.routeData.match.url !== routeInfo.pathname) {\n            return;\n          }\n        }\n\n        /**\n         * If there isn't a leaving view item, but the route info indicates\n         * that the user has routed from a previous path, then we need\n         * to find the leaving view item to transition between.\n         */\n        if (!leavingViewItem && this.props.routeInfo.prevRouteLastPathname) {\n          leavingViewItem = this.context.findViewItemByPathname(\n            this.props.routeInfo.prevRouteLastPathname,\n            this.id\n          );\n        }\n\n        /**\n         * If the entering view is already visible and the leaving view is not, the transition does not need to occur.\n         */\n        if (\n          isViewVisible(enteringViewItem.ionPageElement) &&\n          leavingViewItem !== undefined &&\n          !isViewVisible(leavingViewItem.ionPageElement!)\n        ) {\n          return;\n        }\n\n        /**\n         * The view should only be transitioned in the following cases:\n         * 1. Performing a replace or pop action, such as a swipe to go back gesture\n         * to animation the leaving view off the screen.\n         *\n         * 2. Navigating between top-level router outlets, such as /page-1 to /page-2;\n         * or navigating within a nested outlet, such as /tabs/tab-1 to /tabs/tab-2.\n         *\n         * 3. The entering view is an ion-router-outlet containing a page\n         * matching the current route and that hasn't already transitioned in.\n         *\n         * This should only happen when navigating directly to a nested router outlet\n         * route or on an initial page load (i.e. refreshing). In cases when loading\n         * /tabs/tab-1, we need to transition the /tabs page element into the view.\n         */\n        this.transitionPage(routeInfo, enteringViewItem, leavingViewItem);\n      } else if (leavingViewItem && !enteringRoute && !enteringViewItem) {\n        // If we have a leavingView but no entering view/route, we are probably leaving to\n        // another outlet, so hide this leavingView. We do it in a timeout to give time for a\n        // transition to finish.\n        // setTimeout(() => {\n        if (leavingViewItem.ionPageElement) {\n          leavingViewItem.ionPageElement.classList.add('ion-page-hidden');\n          leavingViewItem.ionPageElement.setAttribute('aria-hidden', 'true');\n        }\n        // }, 250);\n      }\n\n      this.forceUpdate();\n    }\n  }\n\n  registerIonPage(page: HTMLElement, routeInfo: RouteInfo) {\n    const foundView = this.context.findViewItemByRouteInfo(routeInfo, this.id);\n    if (foundView) {\n      const oldPageElement = foundView.ionPageElement;\n      foundView.ionPageElement = page;\n      foundView.ionRoute = true;\n\n      /**\n       * React 18 will unmount and remount IonPage\n       * elements in development mode when using createRoot.\n       * This can cause duplicate page transitions to occur.\n       */\n      if (oldPageElement === page) {\n        return;\n      }\n    }\n    this.handlePageTransition(routeInfo);\n  }\n\n  async setupRouterOutlet(routerOutlet: HTMLIonRouterOutletElement) {\n    const canStart = () => {\n      const config = getConfig();\n      const swipeEnabled = config && config.get('swipeBackEnabled', routerOutlet.mode === 'ios');\n      if (!swipeEnabled) {\n        return false;\n      }\n\n      const { routeInfo } = this.props;\n\n      const propsToUse =\n        this.prevProps && this.prevProps.routeInfo.pathname === routeInfo.pushedByRoute\n          ? this.prevProps.routeInfo\n          : ({ pathname: routeInfo.pushedByRoute || '' } as any);\n      const enteringViewItem = this.context.findViewItemByRouteInfo(propsToUse, this.id, false);\n\n      return (\n        !!enteringViewItem &&\n        /**\n         * The root url '/' is treated as\n         * the first view item (but is never mounted),\n         * so we do not want to swipe back to the\n         * root url.\n         */\n        enteringViewItem.mount &&\n        /**\n         * When on the first page (whatever view\n         * you land on after the root url) it\n         * is possible for findViewItemByRouteInfo to\n         * return the exact same view you are currently on.\n         * Make sure that we are not swiping back to the same\n         * instances of a view.\n         */\n        enteringViewItem.routeData.match.path !== routeInfo.pathname\n      );\n    };\n\n    const onStart = async () => {\n      const { routeInfo } = this.props;\n\n      const propsToUse =\n        this.prevProps && this.prevProps.routeInfo.pathname === routeInfo.pushedByRoute\n          ? this.prevProps.routeInfo\n          : ({ pathname: routeInfo.pushedByRoute || '' } as any);\n      const enteringViewItem = this.context.findViewItemByRouteInfo(propsToUse, this.id, false);\n      const leavingViewItem = this.context.findViewItemByRouteInfo(routeInfo, this.id, false);\n\n      /**\n       * When the gesture starts, kick off\n       * a transition that is controlled\n       * via a swipe gesture.\n       */\n      if (enteringViewItem && leavingViewItem) {\n        await this.transitionPage(routeInfo, enteringViewItem, leavingViewItem, 'back', true);\n      }\n\n      return Promise.resolve();\n    };\n    const onEnd = (shouldContinue: boolean) => {\n      if (shouldContinue) {\n        this.skipTransition = true;\n\n        this.context.goBack();\n      } else {\n        /**\n         * In the event that the swipe\n         * gesture was aborted, we should\n         * re-hide the page that was going to enter.\n         */\n        const { routeInfo } = this.props;\n\n        const propsToUse =\n          this.prevProps && this.prevProps.routeInfo.pathname === routeInfo.pushedByRoute\n            ? this.prevProps.routeInfo\n            : ({ pathname: routeInfo.pushedByRoute || '' } as any);\n        const enteringViewItem = this.context.findViewItemByRouteInfo(propsToUse, this.id, false);\n        const leavingViewItem = this.context.findViewItemByRouteInfo(routeInfo, this.id, false);\n\n        /**\n         * Ionic React has a design defect where it\n         * a) Unmounts the leaving view item when using parameterized routes\n         * b) Considers the current view to be the entering view when using\n         * parameterized routes\n         *\n         * As a result, we should not hide the view item here\n         * as it will cause the current view to be hidden.\n         */\n        if (\n          enteringViewItem !== leavingViewItem &&\n          enteringViewItem?.ionPageElement !== undefined\n        ) {\n          const { ionPageElement } = enteringViewItem;\n          ionPageElement.setAttribute('aria-hidden', 'true');\n          ionPageElement.classList.add('ion-page-hidden');\n        }\n      }\n    };\n\n    routerOutlet.swipeHandler = {\n      canStart,\n      onStart,\n      onEnd,\n    };\n  }\n\n  async transitionPage(\n    routeInfo: RouteInfo,\n    enteringViewItem: ViewItem,\n    leavingViewItem?: ViewItem,\n    direction?: 'forward' | 'back',\n    progressAnimation = false\n  ) {\n    const runCommit = async (enteringEl: HTMLElement, leavingEl?: HTMLElement) => {\n      const skipTransition = this.skipTransition;\n\n      /**\n       * If the transition was handled\n       * via the swipe to go back gesture,\n       * then we do not want to perform\n       * another transition.\n       *\n       * We skip adding ion-page or ion-page-invisible\n       * because the entering view already exists in the DOM.\n       * If we added the classes, there would be a flicker where\n       * the view would be briefly hidden.\n       */\n      if (skipTransition) {\n        /**\n         * We need to reset skipTransition before\n         * we call routerOutlet.commit otherwise\n         * the transition triggered by the swipe\n         * to go back gesture would reset it. In\n         * that case you would see a duplicate\n         * transition triggered by handlePageTransition\n         * in componentDidUpdate.\n         */\n        this.skipTransition = false;\n      } else {\n        enteringEl.classList.add('ion-page');\n        enteringEl.classList.add('ion-page-invisible');\n      }\n\n      await routerOutlet.commit(enteringEl, leavingEl, {\n        deepWait: true,\n        duration: skipTransition || directionToUse === undefined ? 0 : undefined,\n        direction: directionToUse,\n        showGoBack: !!routeInfo.pushedByRoute,\n        progressAnimation,\n        animationBuilder: routeInfo.routeAnimation,\n      });\n    };\n\n    const routerOutlet = this.routerOutletElement!;\n\n    const routeInfoFallbackDirection =\n      routeInfo.routeDirection === 'none' || routeInfo.routeDirection === 'root'\n        ? undefined\n        : routeInfo.routeDirection;\n    const directionToUse = direction ?? routeInfoFallbackDirection;\n\n    if (enteringViewItem && enteringViewItem.ionPageElement && this.routerOutletElement) {\n      if (\n        leavingViewItem &&\n        leavingViewItem.ionPageElement &&\n        enteringViewItem === leavingViewItem\n      ) {\n        // If a page is transitioning to another version of itself\n        // we clone it so we can have an animation to show\n\n        const match = matchComponent(leavingViewItem.reactElement, routeInfo.pathname, true);\n        if (match) {\n          const newLeavingElement = clonePageElement(leavingViewItem.ionPageElement.outerHTML);\n          if (newLeavingElement) {\n            this.routerOutletElement.appendChild(newLeavingElement);\n            await runCommit(enteringViewItem.ionPageElement, newLeavingElement);\n            this.routerOutletElement.removeChild(newLeavingElement);\n          }\n        } else {\n          await runCommit(enteringViewItem.ionPageElement, undefined);\n        }\n      } else {\n        await runCommit(enteringViewItem.ionPageElement, leavingViewItem?.ionPageElement);\n        if (leavingViewItem && leavingViewItem.ionPageElement && !progressAnimation) {\n          leavingViewItem.ionPageElement.classList.add('ion-page-hidden');\n          leavingViewItem.ionPageElement.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  render() {\n    const { children } = this.props;\n    const ionRouterOutlet = React.Children.only(children) as React.ReactElement;\n    this.ionRouterOutlet = ionRouterOutlet;\n\n    const components = this.context.getChildrenToRender(\n      this.id,\n      this.ionRouterOutlet,\n      this.props.routeInfo,\n      () => {\n        this.forceUpdate();\n      }\n    );\n\n    return (\n      <StackContext.Provider value={this.stackContextValue}>\n        {React.cloneElement(\n          ionRouterOutlet as any,\n          {\n            ref: (node: HTMLIonRouterOutletElement) => {\n              if (ionRouterOutlet.props.setRef) {\n                ionRouterOutlet.props.setRef(node);\n              }\n              if (ionRouterOutlet.props.forwardedRef) {\n                ionRouterOutlet.props.forwardedRef.current = node;\n              }\n              this.routerOutletElement = node;\n              const { ref } = ionRouterOutlet as any;\n              if (typeof ref === 'function') {\n                ref(node);\n              }\n            },\n          },\n          components\n        )}\n      </StackContext.Provider>\n    );\n  }\n\n  static get contextType() {\n    return RouteManagerContext;\n  }\n}\n\nexport default StackManager;\n\nfunction matchRoute(node: React.ReactNode, routeInfo: RouteInfo) {\n  let matchedNode: React.ReactNode;\n  React.Children.forEach(node as React.ReactElement, (child: React.ReactElement) => {\n    const matchProps = {\n      exact: child.props.exact,\n      path: child.props.path || child.props.from,\n      component: child.props.component,\n    };\n    const match = matchPath(routeInfo.pathname, matchProps);\n    if (match) {\n      matchedNode = child;\n    }\n  });\n\n  if (matchedNode) {\n    return matchedNode;\n  }\n  // If we haven't found a node\n  // try to find one that doesn't have a path or from prop, that will be our not found route\n  React.Children.forEach(node as React.ReactElement, (child: React.ReactElement) => {\n    if (!(child.props.path || child.props.from)) {\n      matchedNode = child;\n    }\n  });\n\n  return matchedNode;\n}\n\nfunction matchComponent(node: React.ReactElement, pathname: string, forceExact?: boolean) {\n  const matchProps = {\n    exact: forceExact ? true : node.props.exact,\n    path: node.props.path || node.props.from,\n    component: node.props.component,\n  };\n  const match = matchPath(pathname, matchProps);\n\n  return match;\n}\n","import {\n  AnimationBuilder,\n  LocationHistory,\n  NavManager,\n  RouteAction,\n  RouteInfo,\n  RouteManagerContext,\n  RouteManagerContextState,\n  RouterDirection,\n  ViewItem,\n  generateId,\n  getConfig,\n} from '@ionic/react';\nimport { Action as HistoryAction, Location as HistoryLocation } from 'history';\nimport React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\n\nimport { IonRouteInner } from './IonRouteInner';\nimport { ReactRouterViewStack } from './ReactRouterViewStack';\nimport StackManager from './StackManager';\n\nexport interface LocationState {\n  direction?: RouterDirection;\n  routerOptions?: { as?: string; unmount?: boolean };\n}\n\ninterface IonRouteProps extends RouteComponentProps<{}, {}, LocationState> {\n  registerHistoryListener: (\n    cb: (location: HistoryLocation<any>, action: HistoryAction) => void\n  ) => void;\n}\n\ninterface IonRouteState {\n  routeInfo: RouteInfo;\n}\n\nclass IonRouterInner extends React.PureComponent<IonRouteProps, IonRouteState> {\n  currentTab?: string;\n  exitViewFromOtherOutletHandlers: ((pathname: string) => ViewItem | undefined)[] = [];\n  incomingRouteParams?: Partial<RouteInfo>;\n  locationHistory = new LocationHistory();\n  viewStack = new ReactRouterViewStack();\n  routeMangerContextState: RouteManagerContextState = {\n    canGoBack: () => this.locationHistory.canGoBack(),\n    clearOutlet: this.viewStack.clear,\n    findViewItemByPathname: this.viewStack.findViewItemByPathname,\n    getChildrenToRender: this.viewStack.getChildrenToRender,\n    goBack: () => this.handleNavigateBack(),\n    createViewItem: this.viewStack.createViewItem,\n    findViewItemByRouteInfo: this.viewStack.findViewItemByRouteInfo,\n    findLeavingViewItemByRouteInfo: this.viewStack.findLeavingViewItemByRouteInfo,\n    addViewItem: this.viewStack.add,\n    unMountViewItem: this.viewStack.remove,\n  };\n\n  constructor(props: IonRouteProps) {\n    super(props);\n\n    const routeInfo = {\n      id: generateId('routeInfo'),\n      pathname: this.props.location.pathname,\n      search: this.props.location.search,\n    };\n\n    this.locationHistory.add(routeInfo);\n    this.handleChangeTab = this.handleChangeTab.bind(this);\n    this.handleResetTab = this.handleResetTab.bind(this);\n    this.handleNativeBack = this.handleNativeBack.bind(this);\n    this.handleNavigate = this.handleNavigate.bind(this);\n    this.handleNavigateBack = this.handleNavigateBack.bind(this);\n    this.props.registerHistoryListener(this.handleHistoryChange.bind(this));\n    this.handleSetCurrentTab = this.handleSetCurrentTab.bind(this);\n\n    this.state = {\n      routeInfo,\n    };\n  }\n\n  handleChangeTab(tab: string, path?: string, routeOptions?: any) {\n    if (!path) { return; }\n\n    const routeInfo = this.locationHistory.getCurrentRouteInfoForTab(tab);\n    const [pathname, search] = path.split('?');\n    if (routeInfo) {\n      this.incomingRouteParams = { ...routeInfo, routeAction: 'push', routeDirection: 'none' };\n      if (routeInfo.pathname === pathname) {\n        this.incomingRouteParams.routeOptions = routeOptions;\n        this.props.history.push(routeInfo.pathname + (routeInfo.search || ''));\n      } else {\n        this.incomingRouteParams.pathname = pathname;\n        this.incomingRouteParams.search = search ? '?' + search : undefined;\n        this.incomingRouteParams.routeOptions = routeOptions;\n        this.props.history.push(pathname + (search ? '?' + search : ''));\n      }\n    } else {\n      this.handleNavigate(pathname, 'push', 'none', undefined, routeOptions, tab);\n    }\n  }\n\n  handleHistoryChange(location: HistoryLocation<LocationState>, action: HistoryAction) {\n    let leavingLocationInfo: RouteInfo;\n    if (this.incomingRouteParams) {\n      if (this.incomingRouteParams.routeAction === 'replace') {\n        leavingLocationInfo = this.locationHistory.previous();\n      } else {\n        leavingLocationInfo = this.locationHistory.current();\n      }\n    } else {\n      leavingLocationInfo = this.locationHistory.current();\n    }\n\n    const leavingUrl = leavingLocationInfo.pathname + leavingLocationInfo.search;\n    if (leavingUrl !== location.pathname) {\n      if (!this.incomingRouteParams) {\n        if (action === 'REPLACE') {\n          this.incomingRouteParams = {\n            routeAction: 'replace',\n            routeDirection: 'none',\n            tab: this.currentTab,\n          };\n        }\n        if (action === 'POP') {\n          const currentRoute = this.locationHistory.current();\n          if (currentRoute && currentRoute.pushedByRoute) {\n            const prevInfo = this.locationHistory.findLastLocation(currentRoute);\n            this.incomingRouteParams = { ...prevInfo, routeAction: 'pop', routeDirection: 'back' };\n          } else {\n            this.incomingRouteParams = {\n              routeAction: 'pop',\n              routeDirection: 'none',\n              tab: this.currentTab,\n            };\n          }\n        }\n        if (!this.incomingRouteParams) {\n          this.incomingRouteParams = {\n            routeAction: 'push',\n            routeDirection: location.state?.direction || 'forward',\n            routeOptions: location.state?.routerOptions,\n            tab: this.currentTab,\n          };\n        }\n      }\n\n      let routeInfo: RouteInfo;\n\n      if (this.incomingRouteParams?.id) {\n        routeInfo = {\n          ...(this.incomingRouteParams as RouteInfo),\n          lastPathname: leavingLocationInfo.pathname,\n        };\n        this.locationHistory.add(routeInfo);\n      } else {\n        const isPushed =\n          this.incomingRouteParams.routeAction === 'push' &&\n          this.incomingRouteParams.routeDirection === 'forward';\n        routeInfo = {\n          id: generateId('routeInfo'),\n          ...this.incomingRouteParams,\n          lastPathname: leavingLocationInfo.pathname,\n          pathname: location.pathname,\n          search: location.search,\n          params: this.props.match.params,\n          prevRouteLastPathname: leavingLocationInfo.lastPathname,\n        };\n        if (isPushed) {\n          routeInfo.tab = leavingLocationInfo.tab;\n          routeInfo.pushedByRoute = leavingLocationInfo.pathname;\n        } else if (routeInfo.routeAction === 'pop') {\n          const r = this.locationHistory.findLastLocation(routeInfo);\n          routeInfo.pushedByRoute = r?.pushedByRoute;\n        } else if (routeInfo.routeAction === 'push' && routeInfo.tab !== leavingLocationInfo.tab) {\n          // If we are switching tabs grab the last route info for the tab and use its pushedByRoute\n          const lastRoute = this.locationHistory.getCurrentRouteInfoForTab(routeInfo.tab);\n          routeInfo.pushedByRoute = lastRoute?.pushedByRoute;\n        } else if (routeInfo.routeAction === 'replace') {\n          // Make sure to set the lastPathname, etc.. to the current route so the page transitions out\n          const currentRouteInfo = this.locationHistory.current();\n\n          /**\n           * If going from /home to /child, then replacing from\n           * /child to /home, we don't want the route info to\n           * say that /home was pushed by /home which is not correct.\n           */\n          const currentPushedBy = currentRouteInfo?.pushedByRoute;\n          const pushedByRoute = (currentPushedBy !== undefined && currentPushedBy !== routeInfo.pathname) ? currentPushedBy : routeInfo.pushedByRoute;\n\n          routeInfo.lastPathname = currentRouteInfo?.pathname || routeInfo.lastPathname;\n          routeInfo.prevRouteLastPathname = currentRouteInfo?.lastPathname;\n          routeInfo.pushedByRoute = pushedByRoute;\n          routeInfo.routeDirection = currentRouteInfo?.routeDirection || routeInfo.routeDirection;\n          routeInfo.routeAnimation = currentRouteInfo?.routeAnimation || routeInfo.routeAnimation;\n        }\n\n        this.locationHistory.add(routeInfo);\n      }\n\n      this.setState({\n        routeInfo,\n      });\n    }\n\n    this.incomingRouteParams = undefined;\n  }\n\n  /**\n   * history@4.x uses goBack(), history@5.x uses back()\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just\n   * assume back() is available.\n   */\n  handleNativeBack() {\n    const history = this.props.history as any;\n    const goBack = history.goBack || history.back;\n    goBack();\n  }\n\n  handleNavigate(\n    path: string,\n    routeAction: RouteAction,\n    routeDirection?: RouterDirection,\n    routeAnimation?: AnimationBuilder,\n    routeOptions?: any,\n    tab?: string\n  ) {\n    this.incomingRouteParams = Object.assign(this.incomingRouteParams || {}, {\n      routeAction,\n      routeDirection,\n      routeOptions,\n      routeAnimation,\n      tab,\n    });\n\n    if (routeAction === 'push') {\n      this.props.history.push(path);\n    } else {\n      this.props.history.replace(path);\n    }\n  }\n\n  handleNavigateBack(defaultHref: string | RouteInfo = '/', routeAnimation?: AnimationBuilder) {\n    const config = getConfig();\n    defaultHref = defaultHref ? defaultHref : config && config.get('backButtonDefaultHref' as any);\n    const routeInfo = this.locationHistory.current();\n    if (routeInfo && routeInfo.pushedByRoute) {\n      const prevInfo = this.locationHistory.findLastLocation(routeInfo);\n      if (prevInfo) {\n        this.incomingRouteParams = {\n          ...prevInfo,\n          routeAction: 'pop',\n          routeDirection: 'back',\n          routeAnimation: routeAnimation || routeInfo.routeAnimation,\n        };\n        if (\n          routeInfo.lastPathname === routeInfo.pushedByRoute ||\n          (\n            /**\n             * We need to exclude tab switches/tab\n             * context changes here because tabbed\n             * navigation is not linear, but router.back()\n             * will go back in a linear fashion.\n             */\n            prevInfo.pathname === routeInfo.pushedByRoute &&\n            routeInfo.tab === '' && prevInfo.tab === ''\n          )\n        ) {\n          /**\n           * history@4.x uses goBack(), history@5.x uses back()\n           * TODO: If support for React Router <=5 is dropped\n           * this logic is no longer needed. We can just\n           * assume back() is available.\n           */\n          const history = this.props.history as any;\n          const goBack = history.goBack || history.back;\n          goBack();\n        } else {\n          this.handleNavigate(prevInfo.pathname + (prevInfo.search || ''), 'pop', 'back');\n        }\n      } else {\n        this.handleNavigate(defaultHref as string, 'pop', 'back');\n      }\n    } else {\n      this.handleNavigate(defaultHref as string, 'pop', 'back');\n    }\n  }\n\n  handleResetTab(tab: string, originalHref: string, originalRouteOptions: any) {\n    const routeInfo = this.locationHistory.getFirstRouteInfoForTab(tab);\n    if (routeInfo) {\n      const newRouteInfo = { ...routeInfo };\n      newRouteInfo.pathname = originalHref;\n      newRouteInfo.routeOptions = originalRouteOptions;\n      this.incomingRouteParams = { ...newRouteInfo, routeAction: 'pop', routeDirection: 'back' };\n      this.props.history.push(newRouteInfo.pathname + (newRouteInfo.search || ''));\n    }\n  }\n\n  handleSetCurrentTab(tab: string) {\n    this.currentTab = tab;\n    const ri = { ...this.locationHistory.current() };\n    if (ri.tab !== tab) {\n      ri.tab = tab;\n      this.locationHistory.update(ri);\n    }\n  }\n\n  render() {\n    return (\n      <RouteManagerContext.Provider value={this.routeMangerContextState}>\n        <NavManager\n          ionRoute={IonRouteInner}\n          ionRedirect={{}}\n          stackManager={StackManager}\n          routeInfo={this.state.routeInfo!}\n          onNativeBack={this.handleNativeBack}\n          onNavigateBack={this.handleNavigateBack}\n          onNavigate={this.handleNavigate}\n          onSetCurrentTab={this.handleSetCurrentTab}\n          onChangeTab={this.handleChangeTab}\n          onResetTab={this.handleResetTab}\n          locationHistory={this.locationHistory}\n        >\n          {this.props.children}\n        </NavManager>\n      </RouteManagerContext.Provider>\n    );\n  }\n}\n\nexport const IonRouter = withRouter(IonRouterInner);\nIonRouter.displayName = 'IonRouter';\n","import {\n  Action as HistoryAction,\n  History,\n  Location as HistoryLocation,\n  createBrowserHistory as createHistory,\n} from 'history';\nimport React from 'react';\nimport { BrowserRouterProps, Router } from 'react-router-dom';\n\nimport { IonRouter } from './IonRouter';\n\ninterface IonReactRouterProps extends BrowserRouterProps {\n  history?: History;\n}\n\nexport class IonReactRouter extends React.Component<IonReactRouterProps> {\n  historyListenHandler?: (location: HistoryLocation, action: HistoryAction) => void;\n  history: History;\n\n  constructor(props: IonReactRouterProps) {\n    super(props);\n    const { history, ...rest } = props;\n    this.history = history || createHistory(rest);\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n\n /**\n  * history@4.x passes separate location and action\n  * params. history@5.x passes location and action\n  * together as a single object.\n  * TODO: If support for React Router <=5 is dropped\n  * this logic is no longer needed. We can just assume\n  * a single object with both location and action.\n  */\n  handleHistoryChange(location: HistoryLocation, action: HistoryAction) {\n   const locationValue = (location as any).location || location;\n   const actionValue = (location as any).action || action;\n   if (this.historyListenHandler) {\n     this.historyListenHandler(locationValue, actionValue);\n   }\n }\n\n  registerHistoryListener(cb: (location: HistoryLocation, action: HistoryAction) => void) {\n    this.historyListenHandler = cb;\n  }\n\n  render() {\n    const { children, ...props } = this.props;\n    return (\n      <Router history={this.history} {...props}>\n        <IonRouter registerHistoryListener={this.registerHistoryListener}>{children}</IonRouter>\n      </Router>\n    );\n  }\n}\n","import { Action as HistoryAction, Location as HistoryLocation, MemoryHistory } from 'history';\nimport React from 'react';\nimport { MemoryRouterProps, Router } from 'react-router';\n\nimport { IonRouter } from './IonRouter';\n\ninterface IonReactMemoryRouterProps extends MemoryRouterProps {\n  history: MemoryHistory;\n}\n\nexport class IonReactMemoryRouter extends React.Component<IonReactMemoryRouterProps> {\n  history: MemoryHistory;\n  historyListenHandler?: (location: HistoryLocation, action: HistoryAction) => void;\n\n  constructor(props: IonReactMemoryRouterProps) {\n    super(props);\n    this.history = props.history;\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n\n  /**\n   * history@4.x passes separate location and action\n   * params. history@5.x passes location and action\n   * together as a single object.\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just assume\n   * a single object with both location and action.\n   */\n  handleHistoryChange(location: HistoryLocation, action: HistoryAction) {\n    const locationValue = (location as any).location || location;\n    const actionValue = (location as any).action || action;\n    if (this.historyListenHandler) {\n      this.historyListenHandler(locationValue, actionValue);\n    }\n  }\n\n  registerHistoryListener(cb: (location: HistoryLocation, action: HistoryAction) => void) {\n    this.historyListenHandler = cb;\n  }\n\n  render() {\n    const { children, ...props } = this.props;\n    return (\n      <Router {...props}>\n        <IonRouter registerHistoryListener={this.registerHistoryListener}>{children}</IonRouter>\n      </Router>\n    );\n  }\n}\n","import {\n  Action as HistoryAction,\n  History,\n  Location as HistoryLocation,\n  createHashHistory as createHistory,\n} from 'history';\nimport React from 'react';\nimport { BrowserRouterProps, Router } from 'react-router-dom';\n\nimport { IonRouter } from './IonRouter';\n\ninterface IonReactHashRouterProps extends BrowserRouterProps {\n  history?: History;\n}\n\nexport class IonReactHashRouter extends React.Component<IonReactHashRouterProps> {\n  history: History;\n  historyListenHandler?: (location: HistoryLocation, action: HistoryAction) => void;\n\n  constructor(props: IonReactHashRouterProps) {\n    super(props);\n    const { history, ...rest } = props;\n    this.history = history || createHistory(rest);\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n\n  /**\n   * history@4.x passes separate location and action\n   * params. history@5.x passes location and action\n   * together as a single object.\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just assume\n   * a single object with both location and action.\n   */\n  handleHistoryChange(location: HistoryLocation, action: HistoryAction) {\n    const locationValue = (location as any).location || location;\n    const actionValue = (location as any).action || action;\n    if (this.historyListenHandler) {\n      this.historyListenHandler(locationValue, actionValue);\n    }\n  }\n\n  registerHistoryListener(cb: (location: HistoryLocation, action: HistoryAction) => void) {\n    this.historyListenHandler = cb;\n  }\n\n  render() {\n    const { children, ...props } = this.props;\n    return (\n      <Router history={this.history} {...props}>\n        <IonRouter registerHistoryListener={this.registerHistoryListener}>{children}</IonRouter>\n      </Router>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}